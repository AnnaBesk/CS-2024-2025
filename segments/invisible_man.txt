                                    char *temp = words[j];                words[j + 1] = temp;                words[j] = words[j + 1];            break;            break;            dliny[shift] = len;            if (strcmp(words[j], words[j + 1]) > 0) {            len += 1;            len = 0;            lines_count += 1;            shift += 1;            spisok[k][r] = (char)fgetc(fn);            }        //Проверка на конец файла или ошибку чтения        //Проверка на конец файла или ошибку чтения        else if (sym == 10){        else if (sym == 10){        else{        for (int j = 0; j < t - i - 1; ++j) {        for (int r = 0; r < dliny[k]; ++r){        fputs(arr[i], outfile);        free((*p_strings_array)[t]);        if (sym == EOF)        if (sym == EOF)        int sym = fgetc (fn);        int sym = fgetc(fn);        int temp = fgetc(fn); // считывание символа переноса строки        s += 1;        spisok[j] = (char*)malloc(sizeof(char) * (dliny[j] + 1));        spisok[k][dliny[k]] = '\0';        t += 1;        t += 1;        {        {        }        }        }        }        }        }        }    (*p_strings_array) = NULL;    // возвращаюсь в начало масива    // возвращаюсь в начало масива    // посчитать количество строк    // прохожусь по массиву повторно    //возвращаем массив    //выделяем память    //закрываем файл    //освобождаем память от временного массива    //проходимся в третий раз по массиву    //создаем сам массив    FILE* fn = fopen(filename, "r");    FILE* outfile = fopen(output_file, "w");    char** arr = load_lines(input_file);    char** spisok = (char**)malloc(sizeof(char*) * (lines_count + 1));    const char* input_file = argv[1];    const char* output_file = argv[2];    destroy_strings(&arr);    dliny[shift] = len;    fclose(fn);    fclose(outfile);    for (int i = 0; i < s; i++) {    for (int i = 0; i < t - 1; ++i) {     for (int j = 0; j < lines_count; ++j){    for (int k = 0; k < lines_count; ++k){    free(*p_strings_array);    free(dliny);    fseek(fn, 0, SEEK_SET);    fseek(fn, 0, SEEK_SET);    int len = 0;    int lines_count = 0;    int s = 0;    int shift = 0;    int t = 0;    int t = 0;    int* dliny = (int*)malloc(sizeof(int) * (lines_count));    lines_count += 1;    return spisok;    sort_strings(arr);    spisok[lines_count] = NULL;    while ((*p_strings_array)[t] != NULL){    while (1){    while (1){    while (arr[s] != NULL){    while (words[t] != NULL) {    }    }    }    }    }    }    }    }    }    }#include <stdio.h>#include <stdlib.h>#include <string.h>char** load_lines(const char* filename){int main(int argc, char* argv[])void destroy_strings(char*** p_strings_array){void sort_strings(char** words) {{}}}